apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    defaultConfig {
        //唯一标识一个app,修改这个可以在多渠道打包时，让同个app的不同构建包同时安装在一台设备上
        applicationId "com.test.aidl"
        //指定运行需要的最小API版本
        minSdkVersion 19
        //指定用来测试的API版本
        targetSdkVersion 27
        //app版本号
        versionCode 1
        //app版本名
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    //签名
    signingConfigs {
        release {
            storeFile file("aidl.jks")
            storePassword "123456"
            keyAlias "key"
            keyPassword "123456"
        }
        debug {
            storeFile file("aidl.jks")
            storePassword "123456"
            keyAlias "key"
            keyPassword "123456"
        }
    }
    buildTypes {
        release {
            minifyEnabled false         //不启用Proguard
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false        //不启用Proguard
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

}
//多渠道打包
this.android.flavorDimensions 'type'
this.android.productFlavors {
    //定义各大平台的名字
    googlepay {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "googlepay"]
    }
    baidu {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "baidu"]
    }
    qihoo360 {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "qihoo360"]
    }
    xiaomi {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "xiaomi"]
    }
    tencent {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "tencent"]
    }
    anzhi {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "anzhi"]
    }
}
// 指定apk名字输出格式

this.android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "aidl_${this.android.defaultConfig.versionName}_" +
                "${this.android.defaultConfig.versionCode}_" +
                "${variant.productFlavors[0].name}.apk"
    }
}

task copyTask {
    doLast {

        def apkNameList = [
                "anzhi",
                "baidu",
                "googlepay",
                "qihoo360",
                "tencent",
                "xiaomi"
        ]
        //遍历
        apkNameList.each { def content ->
            println content

            def fileName = "aidl_${this.android.defaultConfig.versionName}_" +
                    "${this.android.defaultConfig.versionCode}_" +
                    "${content}.apk"
            println fileName

//        拷贝文件的始发地
            def sourceFile = "./build/outputs/apk/${content}/debug/" + fileName
            println sourceFile

//        指定文件拷贝的目的地
            def destationFile = new File(project.getProjectDir().path + "apk/")
            try {
//            判断文件夹是否存在
                if (!destationFile.exists()) {
                    destationFile.mkdir()
                }
                //拷贝
                copy {
                    from sourceFile
                    into destationFile

                    rename {
                        fileName
                    }
                }

            } catch (Exception e) {
                e.printStackTrace()
            }
        }
    }
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
}
