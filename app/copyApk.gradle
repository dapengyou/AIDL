//多渠道打包
this.android.flavorDimensions 'type'
this.android.productFlavors {
    //定义各大平台的名字
    googlepay {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "googlepay"]
    }
    baidu {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "baidu"]
    }
    qihoo360 {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "qihoo360"]
    }
    xiaomi {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "xiaomi"]
    }
    tencent {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "tencent"]
    }
    anzhi {
        dimension 'type'
        manifestPlaceholders = [MTA_CHANNEL_VALUE: "anzhi"]
    }
}
// 指定apk名字输出格式

this.android.applicationVariants.all { variant ->
    variant.outputs.all {
        outputFileName = "aidl_${this.android.defaultConfig.versionName}_" +
                "${this.android.defaultConfig.versionCode}_" +
                "${variant.productFlavors[0].name}.apk"
    }
}


//自定义copyApk task
task copyTask {
    doLast {
        def apkNameList = [
                "anzhi",
                "baidu",
                "googlepay",
                "qihoo360",
                "tencent",
                "xiaomi"
        ]
        //遍历
        apkNameList.each { def content ->

            def fileName = "aidl_${this.android.defaultConfig.versionName}_" +
                    "${this.android.defaultConfig.versionCode}_" +
                    "${content}.apk"

//        拷贝文件的始发地
            def sourceFile = "./build/outputs/apk/${content}/debug/" + fileName

//        指定文件拷贝的目的地
            def destationFile = new File(project.getProjectDir().path + "apk/")
            try {
//            判断文件夹是否存在
                if (!destationFile.exists()) {
                    destationFile.mkdir()
                }
                //拷贝
                copy {
                    from sourceFile
                    into destationFile

                    rename {
                        fileName
                    }
                }

            } catch (Exception e) {
                e.printStackTrace()
            }
        }
    }
}

//挂接自定义task到构建过程中
this.project.afterEvaluate { project ->
//    获得build task
    def buildTask = project.tasks.getByName('build')
    if (buildTask == null) {
        throw GradleException('the build task is not found')
    }
    buildTask.doLast {
        copyTask.execute()
    }
}

